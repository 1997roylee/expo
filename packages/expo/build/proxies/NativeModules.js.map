{"version":3,"file":"NativeModules.js","sourceRoot":"","sources":["../../src/proxies/NativeModules.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AAEtD,MAAM,eAAe,GAAa;IAChC;;;OAGG;IACH,gBAAgB;IAChB,eAAe;IACf,2BAA2B;IAC3B,sBAAsB;IACtB;;;;OAIG;IACH,gBAAgB;IAChB,eAAe;IACf,QAAQ;IACR,gBAAgB;IAChB,UAAU;IACV,SAAS;IACT,UAAU;CACX,CAAC;AACF,MAAM,kBAAkB,GAAa,EAAE,CAAC;AAExC,IAAI,yBAAyB,GAAa,EAAE,CAAC;AAC7C,IAAI,OAAO,GAAG,IAAI,CAAC;AAEnB,SAAS,gCAAgC,CAAC,UAAkB;IAC1D,OAAO,yDAAyD,UAAU;+BAC7C,UAAU,0HAA0H,CAAC;AACpK,CAAC;AAED,SAAS,qCAAqC,CAAC,UAAkB;IAC/D,OAAO,yDAAyD,UAAU;+NACmJ,CAAC;AAChO,CAAC;AAED,MAAM,UAAU,2BAA2B,CAAC,aAAkB;IAC5D,IAAI,CAAC,OAAO,EAAE;QACZ,OAAO,aAAa,CAAC;KACtB;IACD,OAAO,IAAI,KAAK,CAAC,aAAa,EAAE;QAC9B,GAAG,CAAC,MAAM,EAAE,IAAI;YACd,MAAM,KAAK,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;YAC3B,IACE,OAAO;gBACP,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,SAAS,CAAC;gBACvC,CAAC,eAAe,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBAC1C,CAAC,yBAAyB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC;gBACpD,qCAAqC;gBACrC,CAAC,kBAAkB,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,EAC7C;gBACA,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;gBAEzC,MAAM,sBAAsB,GAC1B,MAAM,CAAC,WAAW,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,iBAAiB;oBACzE,EAAE,oBAAoB,KAAK,oBAAoB,CAAC,WAAW;oBAC7D,MAAM,CAAC,oBAAoB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,oBAAoB;wBACpF,oBAAoB,CAAC,WAAW,CAAC;gBACrC,IAAI,sBAAsB,EAAE;oBAC1B,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBACpE;qBAAM,IAAI,MAAM,CAAC,aAAa,EAAE;oBAC/B,MAAM,IAAI,KAAK,CAAC,qCAAqC,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;iBACzE;aACF;YACD,OAAO,KAAK,CAAC;QACf,CAAC;KACF,CAAC,CAAC;AACL,CAAC;AAED,MAAM,UAAU,gCAAgC,CAAC,WAA+B;IAC9E,IAAI,WAAW,EAAE;QACf,yBAAyB,GAAG,OAAO,WAAW,KAAK,QAAQ,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;QAC1F,OAAO,GAAG,IAAI,CAAC;KAChB;SAAM;QACL,OAAO,GAAG,KAAK,CAAC;KACjB;AACH,CAAC","sourcesContent":["import { ExecutionEnvironment } from 'expo-constants';\n\nconst PROPS_TO_IGNORE: string[] = [\n  /**\n   * We don't want to throw when the expo or expo-modules-core packages try to access any of these\n   * modules, since they have built-in fallbacks.\n   */\n  'DevLoadingView',\n  'EXDevLauncher',\n  'EXReactNativeEventEmitter',\n  'NativeUnimoduleProxy',\n  /**\n   * Other methods that can be called on the NativeModules object that we should ignore. The\n   * underlying NativeModules object is sometimes a proxy itself so may not have these methods\n   * defined.\n   */\n  'hasOwnProperty',\n  'isPrototypeOf',\n  'toJSON',\n  'toLocaleString',\n  'toString',\n  'valueOf',\n  '$$typeof',\n];\nconst hasWarnedForModule: string[] = [];\n\nlet additionalModulesToIgnore: string[] = [];\nlet enabled = true;\n\nfunction createErrorMessageForStoreClient(moduleName: string) {\n  return `Your JavaScript code tried to access a native module, ${moduleName}, that isn't supported in Expo Go.\nTo continue development with ${moduleName}, you need to create a development build of your app. See https://docs.expo.dev/development/introduction/ for more info.`;\n}\n\nfunction createErrorMessageForDevelopmentBuild(moduleName: string) {\n  return `Your JavaScript code tried to access a native module, ${moduleName}, that doesn't exist in this development build.\nMake sure you are using the newest available development build of this app and running a compatible version of your JavaScript code. If you've installed a new library recently, you may need to make a new development build.`;\n}\n\nexport function createProxyForNativeModules(NativeModules: any) {\n  if (!__DEV__) {\n    return NativeModules;\n  }\n  return new Proxy(NativeModules, {\n    get(target, prop) {\n      const value = target[prop];\n      if (\n        enabled &&\n        (value === null || value === undefined) &&\n        !PROPS_TO_IGNORE.includes(prop.toString()) &&\n        !additionalModulesToIgnore.includes(prop.toString()) &&\n        // only want to throw once per module\n        !hasWarnedForModule.includes(prop.toString())\n      ) {\n        hasWarnedForModule.push(prop.toString());\n\n        const isRunningInStoreClient =\n          global.ExpoModules?.NativeModulesProxy?.modulesConstants?.ExponentConstants\n            ?.executionEnvironment === ExecutionEnvironment.StoreClient ||\n          target.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants?.executionEnvironment ===\n            ExecutionEnvironment.StoreClient;\n        if (isRunningInStoreClient) {\n          throw new Error(createErrorMessageForStoreClient(prop.toString()));\n        } else if (target.EXDevLauncher) {\n          throw new Error(createErrorMessageForDevelopmentBuild(prop.toString()));\n        }\n      }\n      return value;\n    },\n  });\n}\n\nexport function disableMissingNativeModuleErrors(moduleNames?: string[] | string) {\n  if (moduleNames) {\n    additionalModulesToIgnore = typeof moduleNames === 'string' ? [moduleNames] : moduleNames;\n    enabled = true;\n  } else {\n    enabled = false;\n  }\n}\n"]}